{"version":3,"sources":["djik_algorithm.js","block.js","App.js","index.js"],"names":["is_in_priority","cords","priority","pr","found","a","length","find_those_around_me","current_cord","size","allow_diag","top","bottom","right","left","output","push","diag_top_right","diag_bottom_right","diag_top_left","diag_bottom_left","quicksort","array","pivot","shift","forEach","item","weight","concat","pythagros","current","dest","Math","sqrt","pow","App","state","priority_queue_raw","route_queue","done_queue_raw","blocked_nodes","start_cords","end_cord","speed","playing","diag","toggle_blocked_nodes","toggle","id","filter","setState","return_str_format","arr","obj","timer","Promise","res","setTimeout","algorithm","functions","priority_queue","done_queue","parent_index","iteration_number","max_number_of_traversals","target_found","around_current_node","temp_node","indexOf","parent_cords_index","node","priority_index","existing_weight","pyth","new_weight","new_cord_first","undefined","container_style","columns","display","gridGap","gridTemplateColumns","width","height","borderRadius","change_axis","value","axis","limit","limit_y","change_cords","start","render_block","table","b","radius","key","x","y","className","style","map","change_speed","toggle_diag","this","React","Component","Panel","err","message","isNaN","props","parseInt","console","log","href","disabled","onChange","target","placeholder","onClick","Block","hover","is_block","block_style","background","opacity","cursor","color","justifyContent","alignItems","fontSize","fontFamily","determine_state","clicked_block","onMouseEnter","onMouseLeave","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5c279ef.chunk.js","sourcesContent":["const algorithm = (size, start_cords, end_cord) => {\r\n\r\n    //size will be the width and height of our grid\r\n    //start and end cords will both be arrays representing the x and y cords\r\n    \r\n    let current_cord = start_cords;\r\n    let sum_of_weights = 0; \r\n    let priority_queue = [];\r\n    let done_queue_raw = [start_cords];\r\n    let done_queue = [{cords:start_cords, weight:pythagros(start_cords, end_cord), parent_index:null}];\r\n    let iteration_number = 1;\r\n    const max_number_of_traversals = size[0] * size[1];\r\n    let target_found = false;\r\n    // const max_number_of_traversals = 3;\r\n    //priority_que is an array which will store each entity as they are being tracked  \r\n    //entity formated as { cords:null, weight:1, parent_index:null }\r\n    // console.log(\"\\n\")\r\n    while (!target_found && iteration_number < max_number_of_traversals) {\r\n        // console.log(iteration_number, \"::done::\", done_queue, \"::prio::\", priority_queue)\r\n        let around_current_node = find_those_around_me(current_cord, size);\r\n        // console.log(current_cord)\r\n        \r\n        around_current_node = around_current_node.filter(temp_node=>{\r\n            return is_in_priority(temp_node, done_queue, true) == -1;\r\n        })\r\n        const parent_cords_index = done_queue_raw.indexOf(current_cord);\r\n\r\n        around_current_node.forEach(node=>{\r\n\r\n            //check if this node has already been accounted for, else generate and add to priority queue\r\n            // console.log(parent_cords_index,done_que_index );\r\n                //This node has not been accounted for yet since it is not completely the done_que list\r\n                const priority_index = is_in_priority(node, priority_queue)\r\n                if(priority_index!=-1){\r\n                    //it is in the priority queue so evaluate weight and change parent if necesarry  \r\n                    const existing_weight = priority_queue[priority_index].weight;\r\n                    const pyth = pythagros(node, end_cord);\r\n                    // console.log(pyth)\r\n                    const new_weight = done_queue[parent_cords_index].weight + (pyth);\r\n                    if(new_weight < existing_weight ){\r\n                        priority_queue[priority_index].weight = new_weight;\r\n                        priority_queue[priority_index].parent_index = parent_cords_index;\r\n                    }\r\n                }else {\r\n\r\n                    //generate a new node for these co-ordinates\r\n                    priority_queue.push({ cords:node, weight:1+done_queue[parent_cords_index].weight, parent_index:parent_cords_index });\r\n                }\r\n\r\n        });\r\n        priority_queue = quicksort(priority_queue);\r\n        const new_cord_first = priority_queue.shift();\r\n        if(new_cord_first!=undefined){\r\n            done_queue.push(new_cord_first);\r\n            done_queue_raw.push(new_cord_first.cords);\r\n            current_cord = new_cord_first.cords;    \r\n        }\r\n        if(current_cord[0]==end_cord[0] && current_cord[1]==end_cord[1]){\r\n            target_found = true;\r\n        }\r\n\r\n        iteration_number++;\r\n    }\r\n    console.log(target_found)\r\n    let output = [];\r\n    if(target_found){\r\n        \r\n        current_cord = is_in_priority(end_cord, done_queue);\r\n        while(current_cord!=-1){\r\n            let node = done_queue[current_cord];\r\n            output.push(node);\r\n            current_cord = node.parent_index == null ? -1 : node.parent_index;\r\n        }\r\n        \r\n\r\n        console.log(output)\r\n    }\r\n    \r\n\r\n\r\n}\r\n\r\nconst is_in_priority = (cords, priority, pr) => {\r\n    let found = -1;\r\n\r\n    for(let a = 0; a < priority.length; a++){\r\n        \r\n        if(priority[a].cords[0]==cords[0] && priority[a].cords[1]==cords[1]){\r\n            found = a;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return found;\r\n}\r\n\r\nconst  find_those_around_me = (current_cord, size, allow_diag) => { \r\n\r\n    let top = (current_cord[1] - 1) >= 0 ? [ current_cord[0], current_cord[1] - 1 ] : null;  \r\n    let bottom = (current_cord[1] + 1) < size[1] ? [ current_cord[0], current_cord[1] + 1 ] : null;  \r\n    let right = (current_cord[0] + 1) < size[0] ? [ current_cord[0] + 1, current_cord[1] ] : null;  \r\n    let left = (current_cord[0] - 1) >= 0 ? [ current_cord[0] - 1, current_cord[1] ] : null;  \r\n\r\n    let output = [];\r\n    if(top!=null)\r\n        output.push(top);\r\n    if(bottom!=null)\r\n        output.push(bottom);\r\n    if(right!=null)\r\n        output.push(right);\r\n    if(left!=null)\r\n        output.push(left);\r\n\r\n\r\n    if(allow_diag){\r\n        let diag_top_right = top != null && right != null ? [ current_cord[0]+1, current_cord[1]-1 ] : null;\r\n        let diag_bottom_right = bottom != null && right != null ? [ current_cord[0]+1, current_cord[1]+1 ] : null;\r\n        let diag_top_left = top != null && left != null ? [ current_cord[0]-1, current_cord[1]-1 ] : null;\r\n        let diag_bottom_left = bottom != null && left != null ? [ current_cord[0]-1, current_cord[1]+1 ] : null;\r\n    \r\n        if(diag_top_right!=null)\r\n            output.push(diag_top_right);        \r\n        if(diag_bottom_right!=null)\r\n            output.push(diag_bottom_right);        \r\n        if(diag_top_left!=null)\r\n            output.push(diag_top_left);        \r\n        if(diag_bottom_left!=null)\r\n            output.push(diag_bottom_left);        \r\n    \r\n    }\r\n    return output;\r\n\r\n}\r\n\r\nconst quicksort = array => {\r\n    if (array.length <= 1) \r\n      return array;\r\n    \r\n  \r\n    const pivot = array.shift();\r\n    \r\n    let left = []; \r\n    let right = [];\r\n    \r\n    array.forEach(item=>{\r\n        item.weight < pivot.weight ? left.push(item) : right.push(item)  \r\n    })\r\n  \r\n    return quicksort(left).concat(pivot, quicksort(right));\r\n  };\r\n\r\nconst pythagros = (current, dest) => {\r\n    return Math.sqrt(Math.pow(dest[0] - current[0], 2) + Math.pow(dest[1] - current[1], 2));  \r\n}\r\n  \r\n\r\nexport default { pythagros, quicksort, find_those_around_me, is_in_priority }","import React, { Component } from 'react';\r\nimport functions from './djik_algorithm';\r\nimport './style.css';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        priority_queue_raw:[[0, 0]],\r\n        route_queue: [],\r\n        done_queue_raw:[],\r\n        blocked_nodes: ['05', '14', '23', '32', '43'],\r\n        start_cords:[0, 0],\r\n        end_cord:[9, 9],\r\n        size: [10, 10],\r\n        speed:50, \r\n        playing:false,\r\n        diag:false,\r\n    }\r\n\r\n    toggle_blocked_nodes = (cords, toggle) => {\r\n        let { blocked_nodes } = this.state;\r\n        const id = `${cords[0]}${cords[1]}`;\r\n        if(toggle)\r\n            blocked_nodes.push(id);\r\n        else \r\n            blocked_nodes = blocked_nodes.filter(item=>{\r\n                return id != item\r\n            })\r\n        this.setState({blocked_nodes})\r\n    }\r\n\r\n    return_str_format = (arr, obj=false) => {\r\n        let output = [];\r\n        arr.forEach(item=>{\r\n            if(obj){\r\n                item = item.cords\r\n            }\r\n            output.push(`${item[0]}${item[1]}`)\r\n        })\r\n        return output;\r\n    }\r\n\r\n    timer = () => {\r\n        return new Promise(res => {\r\n            setTimeout(() => {\r\n                res();\r\n            }, this.state.speed);\r\n        });\r\n    }\r\n\r\n    algorithm = async () => {\r\n        this.setState({priority_queue_raw:[], route_queue:[], done_queue_raw:[], playing:true})\r\n        const { pythagros, quicksort, find_those_around_me, is_in_priority } = functions;\r\n        const { start_cords, end_cord, size, blocked_nodes, diag } = this.state;\r\n        let current_cord = start_cords;\r\n        let priority_queue = [];\r\n        let priority_queue_raw = [];\r\n        let done_queue_raw = [start_cords];\r\n        let done_queue = [{cords:start_cords, weight:pythagros(start_cords, end_cord), parent_index:null}];\r\n        let iteration_number = 1;\r\n        const max_number_of_traversals = size[0] * size[1];\r\n        let target_found = false;\r\n\r\n        while (!target_found && iteration_number < max_number_of_traversals) {\r\n            await this.timer()\r\n\r\n            let around_current_node = find_those_around_me(current_cord, size, diag);\r\n            \r\n            around_current_node = around_current_node.filter(temp_node=>{\r\n                return is_in_priority(temp_node, done_queue, true) == -1 && blocked_nodes.indexOf(`${temp_node[0]}${temp_node[1]}`) == -1 ;\r\n            })\r\n            const parent_cords_index = done_queue_raw.indexOf(current_cord);\r\n    \r\n            around_current_node.forEach(node=>{\r\n    \r\n                    const priority_index = is_in_priority(node, priority_queue)\r\n                    if(priority_index!=-1){\r\n                        const existing_weight = priority_queue[priority_index].weight;\r\n                        const pyth = pythagros(node, end_cord);\r\n                        const new_weight = done_queue[parent_cords_index].weight + (pyth);\r\n                        if(new_weight < existing_weight ){\r\n                            priority_queue[priority_index].weight = new_weight;\r\n                            priority_queue[priority_index].parent_index = parent_cords_index;\r\n                        }\r\n                    }else {\r\n                        priority_queue.push({ cords:node, weight:1+done_queue[parent_cords_index].weight, parent_index:parent_cords_index });\r\n                        priority_queue_raw.push(node)\r\n                    }\r\n    \r\n            });\r\n            priority_queue = quicksort(priority_queue);\r\n            const new_cord_first = priority_queue.shift();\r\n            priority_queue_raw.shift();\r\n            if(new_cord_first!=undefined){\r\n                done_queue.push(new_cord_first);\r\n                done_queue_raw.push(new_cord_first.cords);\r\n                current_cord = new_cord_first.cords;    \r\n            }\r\n            if(current_cord[0]==end_cord[0] && current_cord[1]==end_cord[1]){\r\n                target_found = true;\r\n            }\r\n            \r\n            iteration_number++;\r\n                this.setState({priority_queue_raw:this.return_str_format(priority_queue_raw),\r\n                     done_queue_raw:this.return_str_format(done_queue_raw)});\r\n                     \r\n              \r\n\r\n        }\r\n        let output = [];\r\n        if(target_found){\r\n            \r\n            current_cord = is_in_priority(end_cord, done_queue);\r\n            while(current_cord!=-1){\r\n                await this.timer()\r\n                let node = done_queue[current_cord];\r\n                output.push(node);\r\n                current_cord = node.parent_index == null ? -1 : node.parent_index;\r\n                this.setState({route_queue:this.return_str_format(output, true)});\r\n\r\n            }    \r\n        }\r\n\r\n        this.setState({playing:false})\r\n        \r\n    }\r\n\r\n    container_style = columns => ({\r\n        display:'grid', \r\n        gridGap:'0px', gridTemplateColumns:`repeat(${columns}, 1fr)`,\r\n        width:`fit-content`,\r\n        height:'fit-content',\r\n        borderRadius:'10px',\r\n    })  \r\n\r\n    change_axis = (value, axis) => {\r\n        let { size, start_cords, end_cord } = this.state;\r\n\r\n        size[axis] = value;\r\n        const limit = size[0]-1;\r\n        const limit_y = size[1]-1;\r\n        this.setState({size, start_cords:[0, 0], end_cord:[limit, limit_y],\r\n             blocked_nodes:[], priority_queue_raw:[], route_queue:[], done_queue_raw:[]}) \r\n    }\r\n\r\n    change_cords = (value, axis, start) => {\r\n        let { start_cords, end_cord } = this.state;\r\n        if(start){\r\n            start_cords[axis] = value;\r\n            this.setState({start_cords})\r\n        }\r\n        else{\r\n            end_cord[axis] = value;\r\n            this.setState({end_cord})\r\n        } \r\n    }\r\n\r\n    render_block = () => {\r\n        const { size, priority_queue_raw, done_queue_raw, route_queue, blocked_nodes, start_cords, end_cord } = this.state;\r\n        let table = [];\r\n\r\n\r\n        for(let a = 0; a < size[1]; a++){\r\n            for(let b = 0; b < size[0]; b++){\r\n                table.push(<Block priority_queue_raw={priority_queue_raw}\r\n                    radius={a==0 && b==0? 0:a==0 && b==size[0]-1 ? 1 : b==0 && a==size[1]-1 ? 3 : a==size[1]-1 && b==size[0]-1 ? 2 : -1 }\r\n                    toggle={this.toggle_blocked_nodes}\r\n                    blocked_nodes={blocked_nodes}\r\n                    start_cords={start_cords}\r\n                    end_cord={end_cord}\r\n                    done_queue_raw={done_queue_raw} route_queue={route_queue} key={`${a}${b}`} x={b} y={a} />);\r\n            }\r\n        }\r\n      \r\n        return (\r\n            <div className=\"block_container_child\" style={this.container_style(size[0])}>{ table.map(item=>item)}</div>\r\n        )\r\n        \r\n    }\r\n\r\n    change_speed = speed => {\r\n        this.setState({speed})\r\n    }\r\n\r\n    toggle_diag = () => {\r\n        this.setState({diag:!this.state.diag})\r\n    }\r\n\r\n    render(){\r\n        const { playing, size, start_cords, end_cord, diag, speed } = this.state; \r\n        return(\r\n            <div className=\"block_container\">\r\n                <Panel \r\n                speed={speed}\r\n                algorithm={this.algorithm}\r\n                change_speed={this.change_speed}\r\n                diag={diag}\r\n                toggle_diag={this.toggle_diag}\r\n                start_cords={start_cords} \r\n                end_cord={end_cord} playing={playing} \r\n                size={size} change_cords={this.change_cords} change_axis={this.change_axis}/>\r\n                { this.render_block() }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nclass Panel extends Component {\r\n\r\n    state = {\r\n        err:null,\r\n        message:`Click on a cell to make it a barrier, the algorithm won't consider that block as a viable route. Click again to make it a regular cell.\r\n        The following video really helped to aid my understanding of the algorithms`\r\n    }\r\n\r\n\r\n    change_axis = (value, axis) => {\r\n        if(!isNaN(value) && value!=\"\"){\r\n            value = parseInt(value)\r\n            if(value<=14 && value >= 2){\r\n                this.props.change_axis(value, axis)\r\n                this.setState({err:null})\r\n            }\r\n            else {\r\n                this.setState({err:\"Ensure appropiate values within range of 2 and 14 inclusive\"})\r\n            }  \r\n        }else {\r\n            this.props.change_axis(2, axis)\r\n            this.setState({err:\"Ensure integer input instead.\"})\r\n        }\r\n    } \r\n\r\n    change_cords = (value, axis, start) => {\r\n        const { size } = this.props;\r\n        if(!isNaN(value) && value!=\"\"){\r\n            value = parseInt(value)\r\n            if(value<=size[axis] && value >= 0){\r\n                this.props.change_cords(value, axis, start)\r\n                this.setState({err:null})\r\n            }else {\r\n                this.setState({err:\"Ensure appropiate values within range of 0 and \"+(size[axis]-1)+\" inclusive\"})\r\n            } \r\n        }else {\r\n            console.log(\"aqui\", size[axis]-1)\r\n            this.props.change_cords(size[axis]-1, axis, start)\r\n            this.setState({err:\"Ensure integer input instead.\"})\r\n        }\r\n    }\r\n\r\n    change_speed = (value) => {\r\n        if(!isNaN(value) && value!=\"\"){\r\n            value = parseInt(value)\r\n            if(value>=0 && value <= 5000){\r\n                this.props.change_speed(value)\r\n                this.setState({err:null})\r\n            }else {\r\n                this.setState({err:\"Ensure appropiate values within range of 0 and 5000ms inclusive\"})\r\n            } \r\n        }else {\r\n            this.props.change_speed(0)\r\n            this.setState({err:\"Ensure integer input instead.\"})\r\n        }\r\n    }   \r\n\r\n    render(){\r\n        const { playing, start_cords, end_cord, size, diag, toggle_diag, speed, algorithm } = this.props; \r\n        const { message } = this.state;\r\n        return(\r\n            <div id=\"panel_container\" className=\"block_container_child\" >\r\n\r\n                <h1>Djikstra's / A* algorithm</h1>\r\n\r\n\r\n                <div>\r\n                    <p>{message}</p>\r\n                    <a href=\"https://www.youtube.com/watch?v=ySN5Wnu88nE&t=428s\">Youtube video by Computerphile</a>\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>Change dimensions</h2>\r\n                    <input disabled={playing} onChange={({target})=>this.change_axis(target.value, 0)} placeholder={\"width - \"+size[0]} />\r\n                    <input disabled={playing} onChange={({target})=>this.change_axis(target.value, 1)} placeholder={\"height - \"+size[1]}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>Change start point</h2>\r\n                    <input disabled={playing} onChange={({target})=>this.change_cords(target.value, 0, true)} placeholder={\"start, x - \"+start_cords[0]}/>\r\n                    <input disabled={playing} onChange={({target})=>this.change_cords(target.value, 1, true)} placeholder={\"start, y - \"+start_cords[1]}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>Change end point</h2>\r\n                    <input disabled={playing} onChange={({target})=>this.change_cords(target.value, 0, false)} placeholder={\"end, x - \"+end_cord[0]}/>\r\n                    <input disabled={playing} onChange={({target})=>this.change_cords(target.value, 1, false)} placeholder={\"end, y - \"+end_cord[1]}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <button disabled={playing} onClick={toggle_diag}>{diag ? \"Disable diagonal movement\":\"Enable diagonal movement\"}</button>\r\n                </div>\r\n\r\n                <div>\r\n                    <h2>Change animation speed</h2>\r\n                    <input disabled={playing} onChange={({target})=>this.change_speed(target.value)} placeholder={\"Anim speed - \"+speed}/>\r\n                    <p>{this.state.err}</p>\r\n                </div>\r\n\r\n                <div>\r\n                    <button disabled={playing} onClick={algorithm}>Play</button>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Block extends Component {\r\n\r\n    state = {\r\n        hover:false,\r\n        is_block:false,\r\n    }\r\n\r\n    block_style = state => {\r\n        const { hover } = this.state;\r\n        const { radius } = this.props;\r\n\r\n        let arr = [0, 0, 0, 0];\r\n        arr[radius] = 15;\r\n\r\n        return  {\r\n            height:'3.5em',\r\n            width:'3.5em',\r\n            borderRadius:`${arr[0]}px ${arr[1]}px ${arr[2]}px ${arr[3]}px`,\r\n            background:state,\r\n            opacity:hover ? '0.4' : '1',\r\n            cursor:'pointer',\r\n            color:'rgba(0, 0, 0, 0.4)',\r\n            display:'flex',\r\n            justifyContent:'center',\r\n            alignItems:'center',\r\n            fontSize:'0.8em',\r\n            fontFamily:`'Roboto Condensed', sans-serif`,\r\n\r\n        }\r\n    }     \r\n\r\n    determine_state = (x, y) => {\r\n        const { priority_queue_raw, done_queue_raw, route_queue, blocked_nodes, start_cords, end_cord } = this.props;\r\n        // console.log(priority_queue_raw.includes())\r\n           \r\n        \r\n        \r\n        const id = `${x}${y}`;\r\n\r\n        if(blocked_nodes.indexOf(id)!=-1)\r\n            return '#000';\r\n\r\n        if(route_queue.indexOf(id)!=-1)\r\n            return '#82DC3C';\r\n\r\n        if(start_cords[0]==x && start_cords[1]==y)\r\n            return '#CFA81D'\r\n        \r\n        if(end_cord[0]==x && end_cord[1]==y)\r\n            return '#EF4338' \r\n\r\n        if(priority_queue_raw.indexOf(id)!=-1)\r\n            return '#2E642A';\r\n        \r\n        if(done_queue_raw.indexOf(id)!=-1) \r\n            return '#4B831F';\r\n        else \r\n            return '#f3f3f3';\r\n        \r\n    }\r\n\r\n    clicked_block = (x, y) => {\r\n        let { is_block } = this.state;\r\n        is_block = !is_block;\r\n        this.setState({is_block});\r\n        this.props.toggle([x, y], is_block);\r\n    }\r\n\r\n    render(){\r\n\r\n        const { x, y } = this.props;\r\n\r\n        return(\r\n            <div \r\n            onMouseEnter={()=>this.setState({hover:true})}\r\n            onMouseLeave={()=>this.setState({hover:false})}\r\n        onClick={()=>this.clicked_block(x, y)} style={this.block_style(this.determine_state(x, y))}>\r\n            {x}, {y}\r\n        </div>\r\n        )\r\n    }\r\n}\r\nexport default App;\r\n","import React from 'react';\nimport Block from './block';\nimport './style.css';\n\nclass App extends React.Component {\n\n\n\n\n  render(){\n      return(\n        <div className=\"home\">\n          <Block/> \n        </div>\n      )\n  }\n\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}